[{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1","title":"About The Fee Office","content":"The Fee Office is a demo application based on the es-emergency-call Need help with finding aggregates and bounded contexts in our domain by @enumag.It is a prototype implementation showing the result of a model exploration and knowledge crunching process."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1-1","title":"What's insight?","content":"An online book summarizes and documents the process of crunching knowledge and how we used the knowledge to identify bounded contexts and aggregates as well as a good architecture for each bounded context and the system as a large.Note: The book and the prototype are both work in progress."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1-2","title":"Architecture","content":"The system is split into 5 contexts and each context is implemented as an autonomous module within a monolithic application. Think of those modules as (mico)services deployed together. That said, we combine autonomy of bounded contexts (implemented as modules) with the ease of deploying and operating a monolithic system. Because we keep modules separated (even on database level) we are able to split the system later and scale up individual modules if needed. We also keep the model of each context decoupled from the other models - a very important property of a system that is constantly improved and reshaped."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1-3-1","title":"Infrastructure","content":" Docker &amp; Docker Compose Nginx PostgreSQL "},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1-3-2","title":"Programming Language","content":" PHP 7.x "},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1-3-3","title":"API Gateway &amp; Module System","content":" zend\/expressive "},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1-3-4","title":"Dependency Mgmt","content":" composer "},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1-3-5","title":"Event Sourcing","content":" Event Machine "},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/about.html#1-1-3-6","title":"State Persistence","content":" PostgreSQL Document Store Continue with setting up the demo application using Docker. You'll find instructions on the next page."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/installation.html#1-2","title":"Installation","content":"Docker is the only supported way to run the demo application. The commands shown here work on a Linux system with Git, Docker and Docker Compose installed.git clone https:\/\/github.com\/proophsoftware\/fee-office.git cd fee-office docker run --rm -it -v $(pwd):\/app prooph\/composer:7.2 install sudo chown $(id -u -n):$(id -g -n) . -R docker-compose up -d "},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/installation.html#1-2-1","title":"Troubleshooting","content":"With the command docker-compose ps you can list the running containers. Make sure that all required ports are available on your machine. If not you can modify port mapping in the docker-compose.yml."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/installation.html#1-2-1-1","title":"Have you tried turning it off and on again?","content":"If something does not work as expected try to restart the containers first:$ docker-compose down $ docker-compose up -d "},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/installation.html#1-2-1-2","title":"Projection reset","content":"TODOTo better understand the system read about \"autonomous modules\" on the next page."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/module_system.html#1-3","title":"Autonomous Modules","content":"The Fee Office is split into 5 bounded contexts. Each context is represented as a software module in our system. But we don't use a monolithic MVC module approach like you know from ZendFramework 2 modules or Symfony bundles. Instead we use the lightweight module system provided by Zend Expressive.The technique used in the demo is not bound to zend expressive. We've picked it because expressive uses PSR standards and has a module system that works the way we need it. Anyway, you can achieve the same project structure using any existing PHP framework and composer. We recommend asking the respective framework community if you're not sure how to do it with your framework of choice."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/module_system.html#1-3-1","title":"The Rules","content":"Each module should be completely independent of any other module even if all modules are deployed on the same server.To achieve module autonomy we use a special set up. It is a combination of Expressive modules which are also composer packages. More on that in a minute. Furthermore, an application layer acts as the glue layer to coordinate communication between users\/clients and modules as well as between the modules \"talking\" to each other. Each module has its own URL root path, f.e. the RealtyRegistration module uses the path \/realty\/.... Each module has its own composer.json and only uses dependencies defined in that composer.json OR provided by the application layer. Each module has at least a dedicated database schema assigned to it, if not its own database(s). No module is allowed to use a class or function defined in another module. The following diagram illustrates the architecture:If we later want to deploy one or more modules separated from the others (turn a module into a microservice), we can \"easily\" do that by deploying the module together with the application layer and globally defined dependencies provided by the application layer."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/module_system.html#1-3-2","title":"Application Layer","content":"We've installed the zend\/expressive-skeleton with Fastroute, zend\/servicemanager, no template engine and the Whoops error handler. We've also enabled the module system of expressive.The application takes over a few tasks: It uses the zend-component-installer to install our modules. The installer is a composer plugin registered in the root composer.json of the application layer. It merges module config and provides env vars via app.env It performs routing of http requests using Fastroute It provides an error handler (Whoops) and could also include authentication and authorization (not included in the demo) It provides client libraries available for all modules, f.e. a logger, a service bus + basic message classes, etc. The application layer uses the App namespace."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/module_system.html#1-3-3","title":"Modules","content":"A module has its own namespace. For example the RealtyRegistration module uses the namespace FeeOffice\\RealtyRegistration. The namespace maps to the path src\/RealtyRegistration\/src.A module also has its own composer.json where all dependencies of the module should be defined.A module is not allowed to use dependencies that are not defined in its own composer.json. The only exception are global dependencies (client libraries) provided or imported by the application layer. At the moment this is a convention and needs to be ensured by code reviews. In the future we might add a tool that performs automated code scans to ensure that rule.In the application's root composer.json each module is included as local package:\"repositories\": [ { \"type\": \"path\", \"url\": \"src\/RealtyRegistration\" } ], \"require\": { \"php\": \"^7.1\", \"feeoffice\/realty-registration\": \"*\", Example of importing the RealtyRegistration module as package in the root composer.jsonWe use composer to manage module dependencies and add the module namespace to the autoloader. That said, each module can require its own dependencies but as long as modules are deployed together, composer makes sure that different dependency versions don't conflict with each other.Defining module dependencies per module makes it much easier to deploy them independently later.Each module has a config provider and the zend-component-installer composer plugin automatically adds each config provider to the expressive config manager of the application layer. This way, modules provide their own routing and middleware pipe configuration as well as module specific DI definitions.Clean and nice separation of concern which makes it very easy to build a true modularized application with the option to turn it into microservices if needed.That's enough technical detail for now. On the next page you'll get a first overview of the domain."},{"id":"https:\/\/proophsoftware.github.io\/fee-office\/intro\/the_domain.html#1-4","title":"The Domain","content":"As stated in the introduction, the Fee Office is based on an \"es-emergency-call\" and therefor represents the prototype implementation of a real domain.What follows is an introduction of the problem space given by @enumag: The business is about providing accountancy services to the owners of large buildings or organizations that take care of the building when each apartment is owned by a different person. First let's say the database is empty so we need to add some data. The first thing to add is a building, it's entrances (each entrance has a different address) and the apartments in the building. Then we need to add the contracts - who owns and who lives in each apartment. These people need to pay some fees every months which is where our company comes in - to help determine what fees they should pay and observe if they are indeed paying them. When adding a new building, most of the data about apartments, contracts and people are loaded from an external database or an import file. Next we need to tell the system what fees should the people pay and how to calculate the exact amounts (since they can differ each month but can be calculated). This is represented by the FeeRecipe entity. Each contract usually has around 5-10 FeeRecipes. As you can see in the diagram there is a FinancialAccount entity between Contract and FeeRecipe. Most often each contract only has one FinancialAccount but in some edge cases there can be more. This is required because the Fees on different FinancialAccounts are treated a bit differently in some cases based on the attributes of the FinancialAccount but the details are unimportant.  In the draw.io representation I went for something close to an UML diagram, but focusing just on the relations. The diagram represents what a relational schema would look like - in fact this is pretty much what our PostgreSQL projection looks like. I did cut a few less important things here and there such as that each ContactCard hold some addresses, phones, emails etc - these details are not important for this issue in my opinion. At the end of each month an automated process takes each (still active) FeeRecipe and generates a new Fee for it for that month. The calculation requires the formula from the FeeRecipe and the current ApartmentAttributeValues on the related Appartment. ApartmentAttributes are properties of the apartment such as bodycount (how many people live in the apartment at the time) which can change every now and then. Each change is represented by a new ApartmentAttributeValue. Next looking from the other side of the diagram there is an AccountingOrganization. In most cases an AccountingOrganizations is 1:1 with Building but there are exceptions with one AccountingOrganization handling multiple buildings and also exceptions with one building being split to multiple AccountingOrganizations. Therefore we made them completely independent. FinancialAccountGroup is actually a brand new entity we came up with just this morning after discovering some serious problems in our PaymentAllocations process. Basically it's a group of FinancialAccounts that holds some options how should the Payments be allocated to Fees. FinancialAccountGroup is actually the scope for the PaymentAllocations process - take all not-fully-allocated Payments and FeeItems related to the FinancialAccountGroup and do the process described in the previous issue. PaymentPreference holds a reference number that we can use to match a given payment from the import to a specific person and FinancialAccountGroup. The process of matching imported payments to people converts UnassignedPayment to Payment. Finally the ContactCard represents a Person or Company and can be referenced pretty much anywhere in the system. It can be an employee of our company, an owner of an apartment, an organization managing a building, a contractor our company cooperates with etc. That's a lot of information, isn't it? The team has some struggle with identifying the \"right\" bounded contexts and aggregates. @enumag summarizes it like this: Our struggle mostly comes down to the uncertainty of \"how big should an aggregate be\" - where the answer is of course \"it depends\" but I'm unsure \"what exactly it depends on\". Should each of the entities in the diagram be an aggregate? If not then how far should one aggregate go? Is there some limit to how much data should an aggregate hold or how many different methods, related commands and events it should have? For now most of the things on the diagram are actually aggregates (with a few more aggregates planned to oversee the automated processes) with the structure being split to around 5 bounded contexts. Is that too many? Another problem is that some parts of the structure are pretty much pure CRUD - Building, Entrance, Apartment, ApartmentAttributeValue, Contract, FinancialAccount, FeeRecipe, ContactCard - all of that is pretty pure CRUD, albait some parts are automated with imports. The reason why we chose to use DDD are the processes around generating fees, finding out which payment was payed by who and which payment pays which fees (the last process is explained a bit more in #6). Also having the entire event sourced history will be beneficial in some of the processes and also other parts that are not yet represented on the diagram (such as calculating penalties for late payments). This puts us in a not very good position where we need to deal with CRUD in ES\/CQRS while knowing that ES\/CQRS is not really the best thing for CRUD. Two common problems for teams using DDD, CQRS and Event Sourcing for the first time. Let's see if we can help the team with some guidance and a prototype of a modularized application with each module representing a bounded context of the domain.On the next page we'll sort the information given above and take a first look at the bounded contexts."}]